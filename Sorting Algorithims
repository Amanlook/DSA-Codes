# 1. Bubble Sort
  # - Time Complexity: O(n^2)
  # - Auxiliary Space: O(1) 
   
  # Code
  def BubbleSort(list_arr):
    len_is = len(list_arr)-1
    for i in range(len_is):
        for j in range(len_is - i):
            if list_arr[j] > list_arr[j+1]:
                list_arr[j], list_arr[j+1] = list_arr[j+1], list_arr[j]
    return list_arr
    
# 2. Selection Sort
  # - Time Complexity: O(n^2)
  # - Auxiliary Space: O(1) 
  
  # Code
  def SeclectionSort(list_arr):
    len_is = len(list_arr)
    for i in range(len_is):
        min_index = i
        for j in range(i+1, len_is):
            if list_arr[min_index] > list_arr[j]:
                min_index = j
        list_arr[min_index],list_arr[i] = list_arr[i], list_arr[min_index]
                
    return list_arr

# 3. Insertion Sort
  # - Time Complexity: O(n^2)
  # - Auxiliary Space: O(1) 
  
  # Code
  def InsertionSort(list_arr):
    len_list = len(list_arr)
    for i in range(1,len_list):
        a = list_arr[i]
        
        """ Using for loop """
        for j in range(i-1,-1,-1):
            if list_arr[j]>list_arr[j+1]:
                list_arr[j],list_arr[j+1] = list_arr[j+1], list_arr[j]
                
        """Using While loop"""
        for i in range(1,len_list):
        key = list_arr[i]
        j = i-1
        while j >= 0 and key < list_arr[j]:
            list_arr[j+1] = list_arr[j]
            j -= 1
        list_arr[j+1] = key
        
    return list_arr
    

# 4. Bucket Sort
  # - time complexity : O(n^2)
  # - space complexity : O(N)
  
  """use only for uniformly distributed data"""

  # Code
  
  def BucketSort(list_nums):
      from math import sqrt, ceil
      buckets = round(sqrt(len(list_nums)))
      bucket_list = []
      for i in range(buckets):
          bucket_list.append([])

      for val in list_nums:
          index = ceil((val*buckets)/max(list_nums))
          bucket_list[index-1].append(val)

      for li in range(len(bucket_list)):
          """can use any sorting algo"""
          sorted_b_l = InsertionSort(bucket_list[li])
          bucket_list[li][:] = sorted_b_l
      """will return simple list over the nested list"""
      return sum(bucket_list, [])
      
 
# 4. Merge Sort
  # - time complexity : O(nlogn)
  # - space complexity : O(N)
  
  # Code
  
  def merge(custom_list, l, m, r):
    n1 = m-l+1
    n2 = r-m
    L1 = [0] * n1
    R1 = [0] * n2
    for i in range(0,n1):
        L1[i] = custom_list[l+i]
    for j in range(0,n2):
        R1[j] = custom_list[m+1+j]
    i=j=0
    k=l
    while i<n1 and j<n2:
        if L1[i] < R1[j]:
            custom_list[k] = L1[i]
            i += 1
        else:
            custom_list[k] = R1[j]
            j += 1
        k += 1
    while i < n1:
        custom_list[k] = L1[i]
        i += 1
        k += 1
    while j < n2:
        custom_list[k] = R1[j]
        j += 1
        k += 1
    return custom_list
  """Main function"""
  def mergeSort(custom_list, l, r):
      if l<r:
          m = (l+(r-1))//2
          mergeSort(custom_list, l, m)
          mergeSort(custom_list, m+1, r)
          """function to sort the divided list"""
          merge(custom_list, l, m ,r)
      return custom_list

  # if __name__ == "__main__":
      # in_list = [34,23,2,5,645,2,23,24,5,56,3]
      # print(mergeSort(in_list, 0, len(in_list)-1))
      
  
