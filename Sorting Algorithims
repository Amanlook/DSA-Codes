# 1. Bubble Sort
  # - Time Complexity: O(n^2)
  # - Auxiliary Space: O(1) 
   
  # Code
  def BubbleSort(list_arr):
    len_is = len(list_arr)-1
    for i in range(len_is):
        for j in range(len_is - i):
            if list_arr[j] > list_arr[j+1]:
                list_arr[j], list_arr[j+1] = list_arr[j+1], list_arr[j]
    return list_arr
    
# 2. Selection Sort
  # - Time Complexity: O(n^2)
  # - Auxiliary Space: O(1) 
  
  # Code
  def SeclectionSort(list_arr):
    len_is = len(list_arr)
    for i in range(len_is):
        min_index = i
        for j in range(i+1, len_is):
            if list_arr[min_index] > list_arr[j]:
                min_index = j
        list_arr[min_index],list_arr[i] = list_arr[i], list_arr[min_index]
                
    return list_arr

# 3. Insertion Sort
  # - Time Complexity: O(n^2)
  # - Auxiliary Space: O(1) 
  
  # Code
  def InsertionSort(list_arr):
    len_list = len(list_arr)
    for i in range(1,len_list):
        a = list_arr[i]
        
        """ Using for loop """
        for j in range(i-1,-1,-1):
            if list_arr[j]>list_arr[j+1]:
                list_arr[j],list_arr[j+1] = list_arr[j+1], list_arr[j]
                
        """Using While loop"""
        for i in range(1,len_list):
        key = list_arr[i]
        j = i-1
        while j >= 0 and key < list_arr[j]:
            list_arr[j+1] = list_arr[j]
            j -= 1
        list_arr[j+1] = key
        
    return list_arr
    

# 4. Bucket Sort
  # - time complexity : O(n^2)
  # - space complexity : O(N)
  
  """use only for uniformly distributed data"""

  # Code
  
  def BucketSort(list_nums):
      from math import sqrt, ceil
      buckets = round(sqrt(len(list_nums)))
      bucket_list = []
      for i in range(buckets):
          bucket_list.append([])

      for val in list_nums:
          index = ceil((val*buckets)/max(list_nums))
          bucket_list[index-1].append(val)

      for li in range(len(bucket_list)):
          """can use any sorting algo"""
          sorted_b_l = InsertionSort(bucket_list[li])
          bucket_list[li][:] = sorted_b_l
      """will return simple list over the nested list"""
      return sum(bucket_list, [])
